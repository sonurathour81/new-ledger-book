{"ast":null,"code":"import * as act from '../actionType';\nimport * as fun from '../actions/index';\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport { configDatabase } from '../../firebaseSetup';\nimport _ from 'lodash';\nimport { toast } from 'react-toastify';\nconst databaseLoginSignUp = configDatabase.database().ref(\"/login\");\nconst databaseCustomerData = configDatabase.database().ref(\"/customers\");\nconst databaseCustomerItem = configDatabase.database().ref(\"/customersItem\");\nconst databaseCustomerMoney = configDatabase.database().ref(\"/customersMoney\");\n\nconst getLoginSignUpData = () => new Promise(function (resolve, reject) {\n  databaseLoginSignUp.on('value', snapshot => {\n    resolve(snapshot.val());\n  });\n});\n\nconst getCustomerData = () => new Promise(function (resolve, reject) {\n  databaseCustomerData.on('value', snapshot => {\n    resolve(snapshot.val());\n  });\n});\n\nconst getCustomerItems = () => new Promise(function (resolve, reject) {\n  databaseCustomerItem.on('value', snapshot => {\n    resolve(snapshot.val());\n  });\n});\n\nconst getCustomerAmount = () => new Promise(function (resolve, reject) {\n  databaseCustomerMoney.on('value', snapshot => {\n    resolve(snapshot.val());\n  });\n});\n\nexport function* displayData() {\n  try {\n    const result = yield call(getLoginSignUpData);\n    yield put(fun.displayDataSuccess(result));\n  } catch (error) {\n    yield put(fun.displayDataError(error));\n  }\n}\nexport function* initialSignUpGen(data) {\n  try {\n    let x = databaseLoginSignUp.push(data.payload);\n    const out = {\n      [x.key]: { ...data.payload\n      }\n    };\n    yield put(fun.successSignUp(out));\n  } catch (error) {\n    yield put(fun.errorSignUp(error));\n  }\n}\nexport function* initialCustomerGen(data) {\n  try {\n    let x = databaseCustomerData.push(data.payload);\n    const out = {\n      [x.key]: { ...data.payload\n      }\n    };\n    yield put(fun.successCustomerAdd(out));\n  } catch (error) {\n    yield put(fun.errorCustomerAdd(error));\n  }\n}\nexport function* displayCustomerData(data) {\n  try {\n    const result = yield call(getCustomerData);\n\n    const getCustData = _.map(result, (val, key) => {\n      return { ...val,\n        customerId: key\n      };\n    });\n\n    const logedCustData = getCustData.filter(val => {\n      if (val.logedUserId === data.payload) {\n        return val;\n      }\n    });\n    yield put(fun.displayCustomerDataSuccess(logedCustData));\n  } catch (error) {\n    yield put(fun.displayCustomerDataError(error));\n  }\n}\nexport function* deleteCustomer(data) {\n  try {\n    // Delete customer of this id start\n    const useRef = configDatabase.database().ref(`/customers/${data.payload.deleteId}`);\n    useRef.remove();\n    const allcust = yield call(getCustomerData);\n\n    const getCustData = _.map(allcust, (val, key) => {\n      return { ...val,\n        customerId: key\n      };\n    });\n\n    const logedCustData = getCustData.filter(val => {\n      if (val.logedUserId === data.payload.logedId) {\n        return val;\n      }\n    }); // Delete customer of this id end\n    // Delete customer items of this id start\n\n    const allitems = yield call(getCustomerItems);\n\n    const getCustDataitem = _.map(allitems, (val, key) => {\n      return { ...val,\n        customerDataId: key\n      };\n    });\n\n    const filteredCustomer = getCustDataitem.filter(val => {\n      if (val.customerId === data.payload.deleteId) {\n        return val;\n      }\n    });\n    filteredCustomer && filteredCustomer.map(val => {\n      const useRef = configDatabase.database().ref(`/customersItem/${val.customerDataId}`);\n      return useRef.remove();\n    }); // Delete customer items of this id end\n    // Delete customer Money of this id start\n\n    const allMoney = yield call(getCustomerAmount);\n\n    const getCustDataMoney = _.map(allMoney, (val, key) => {\n      return { ...val,\n        customerMoneyId: key\n      };\n    });\n\n    const filteredMoney = getCustDataMoney.filter(val => {\n      if (val.customerId === data.payload.deleteId) {\n        return val;\n      }\n    });\n    filteredMoney && filteredMoney.map(val => {\n      const useRef = configDatabase.database().ref(`/customersMoney/${val.customerMoneyId}`);\n      return useRef.remove();\n    }); // Delete customer Money of this id end\n\n    yield put(fun.deleteCustomerSuccess(logedCustData));\n  } catch (error) {\n    yield put(fun.deleteCustomerError(error));\n  }\n}\nexport function* updateCustomer(data) {\n  try {\n    const {\n      customerId,\n      logedUserId\n    } = data.payload;\n    const useRef = configDatabase.database().ref(`/customers/${customerId}`);\n    useRef.update(data.payload);\n    const result = yield call(getCustomerData);\n\n    const getCustData = _.map(result, (val, key) => {\n      return { ...val,\n        customerId: key\n      };\n    });\n\n    const logedCustData = getCustData.filter(val => {\n      if (val.logedUserId === logedUserId) {\n        return val;\n      }\n    });\n    yield put(fun.updateCustomerSuccess(logedCustData));\n  } catch (error) {\n    yield put(fun.updateCustomerError(error));\n  }\n}\nexport function* addItemsOfCustomer(data) {\n  try {\n    const result = yield call(getCustomerItems);\n\n    const getCustMoneyData = _.map(result, (val, key) => {\n      return { ...val,\n        customerItemsId: key\n      };\n    });\n\n    const xyz = getCustMoneyData.filter(val => {\n      if (val.customerId === data.payload.customerId) {\n        return val;\n      }\n    });\n    let newObj2 = {};\n\n    if (xyz.length > 0) {\n      xyz.map(val => {\n        const newobj = [...val.totalItems, ...data.payload.totalItems];\n        const temp = {\n          customerId: val.customerId,\n          totalItems: [...newobj]\n        };\n        const useRef = configDatabase.database().ref(`/customersItem/${val.customerItemsId}`);\n        useRef.update(temp);\n        newObj2 = { ...temp,\n          customerItemsId: val.customerItemsId\n        };\n      });\n    } else {\n      let x = databaseCustomerItem.push(data.payload);\n      newObj2 = { ...data.payload,\n        customerItemsId: x.key\n      };\n    }\n\n    yield put(fun.addItemsSuccess(newObj2));\n  } catch (error) {\n    yield put(fun.addItemsError(error));\n  }\n}\nexport function* getItemsOfCustomer(data) {\n  try {\n    const clickedCustomer = JSON.parse(localStorage.getItem(\"Clicked_User_Data\")) || [];\n    const result = yield call(getCustomerItems);\n\n    const getCustData = _.map(result, (val, key) => {\n      return { ...val,\n        customerDataId: key\n      };\n    });\n\n    const filteredCustomer = getCustData.filter(val => {\n      if (val.customerId === clickedCustomer.customerId) {\n        return val;\n      }\n    });\n    yield put(fun.getItemsSuccess(filteredCustomer));\n  } catch (error) {\n    yield put(fun.getItemsError(error));\n  }\n}\nexport function* addMoneyofCustomer(data) {\n  try {\n    const result = yield call(getCustomerAmount);\n\n    const getCustMoneyData = _.map(result, (val, key) => {\n      return { ...val,\n        customerMoneyId: key\n      };\n    });\n\n    const xyz = getCustMoneyData.filter(val => {\n      if (val.customerId === data.payload.customerId) {\n        return val;\n      }\n    });\n    let newObj2 = {};\n\n    if (xyz.length > 0) {\n      xyz.map(val => {\n        const newobj = [...val.totAmount, ...data.payload.totAmount];\n        newObj2 = {\n          customerId: val.customerId,\n          totAmount: [...newobj]\n        };\n        const useRef = configDatabase.database().ref(`/customersMoney/${val.customerMoneyId}`);\n        useRef.update(newObj2);\n      });\n    } else {\n      databaseCustomerMoney.push(data.payload);\n      newObj2 = {\n        customerId: data.payload.customerId,\n        totAmount: [...data.payload.totAmount]\n      };\n    }\n\n    yield put(fun.addMoneySuccess(newObj2));\n  } catch (error) {\n    yield put(fun.addMoneyError(error));\n  }\n}\nexport function* getMoneyofCustomer(data) {\n  try {\n    const clickedCustomer = JSON.parse(localStorage.getItem(\"Clicked_User_Data\")) || [];\n    const result = yield call(getCustomerAmount);\n\n    const getCustMoneyData = _.map(result, (val, key) => {\n      return { ...val,\n        customerMoneyId: key\n      };\n    });\n\n    const finalRes = getCustMoneyData.filter(val => {\n      if (val.customerId === clickedCustomer.customerId) {\n        return val;\n      }\n    });\n    yield put(fun.getMoneySuccess(finalRes));\n  } catch (error) {\n    yield put(fun.getMoneyError(error));\n  }\n}\nexport function* watcherSaga() {\n  yield takeEvery(act.CREATE_INITIAL_SIGNUP, initialSignUpGen);\n  yield takeEvery(act.ON_FORM_DISPLAY_INITIAL, displayData);\n  yield takeEvery(act.ADD_CUSTOMER_INITIAL, initialCustomerGen);\n  yield takeEvery(act.DISPLAY_CUSTOMER_DATA_INITIAL, displayCustomerData);\n  yield takeEvery(act.DELETE_CUSTOMER_INITIAL, deleteCustomer);\n  yield takeEvery(act.UPDATE_CUSTOMER_INITIAL, updateCustomer);\n  yield takeEvery(act.ADD_ITEMS_OF_CUSTOMER_INITIAL, addItemsOfCustomer);\n  yield takeEvery(act.GET_ITEMS_OF_CUSTOMER_INITIAL, getItemsOfCustomer);\n  yield takeEvery(act.ADD_MONEY_OF_CUSTOMER_INITIAL, addMoneyofCustomer);\n  yield takeEvery(act.GET_MONEY_OF_CUSTOMER_INITIAL, getMoneyofCustomer);\n}\nexport default function* rootSaga() {\n  yield all([watcherSaga()]);\n}","map":{"version":3,"sources":["/home/lenovo-hoolime1/Desktop/sonu 22-01-2020/React Redux Projects without npm/ledger_book/src/redux/saga/index.js"],"names":["act","fun","all","takeEvery","put","call","configDatabase","_","toast","databaseLoginSignUp","database","ref","databaseCustomerData","databaseCustomerItem","databaseCustomerMoney","getLoginSignUpData","Promise","resolve","reject","on","snapshot","val","getCustomerData","getCustomerItems","getCustomerAmount","displayData","result","displayDataSuccess","error","displayDataError","initialSignUpGen","data","x","push","payload","out","key","successSignUp","errorSignUp","initialCustomerGen","successCustomerAdd","errorCustomerAdd","displayCustomerData","getCustData","map","customerId","logedCustData","filter","logedUserId","displayCustomerDataSuccess","displayCustomerDataError","deleteCustomer","useRef","deleteId","remove","allcust","logedId","allitems","getCustDataitem","customerDataId","filteredCustomer","allMoney","getCustDataMoney","customerMoneyId","filteredMoney","deleteCustomerSuccess","deleteCustomerError","updateCustomer","update","updateCustomerSuccess","updateCustomerError","addItemsOfCustomer","getCustMoneyData","customerItemsId","xyz","newObj2","length","newobj","totalItems","temp","addItemsSuccess","addItemsError","getItemsOfCustomer","clickedCustomer","JSON","parse","localStorage","getItem","getItemsSuccess","getItemsError","addMoneyofCustomer","totAmount","addMoneySuccess","addMoneyError","getMoneyofCustomer","finalRes","getMoneySuccess","getMoneyError","watcherSaga","CREATE_INITIAL_SIGNUP","ON_FORM_DISPLAY_INITIAL","ADD_CUSTOMER_INITIAL","DISPLAY_CUSTOMER_DATA_INITIAL","DELETE_CUSTOMER_INITIAL","UPDATE_CUSTOMER_INITIAL","ADD_ITEMS_OF_CUSTOMER_INITIAL","GET_ITEMS_OF_CUSTOMER_INITIAL","ADD_MONEY_OF_CUSTOMER_INITIAL","GET_MONEY_OF_CUSTOMER_INITIAL","rootSaga"],"mappings":"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","sourcesContent":["import * as act from '../actionType'\nimport * as fun from '../actions/index';\nimport { all, takeEvery, put ,call} from 'redux-saga/effects';\nimport {configDatabase} from '../../firebaseSetup';\nimport _ from 'lodash';\nimport { toast } from 'react-toastify';\n\nconst databaseLoginSignUp = configDatabase.database().ref(\"/login\");\nconst databaseCustomerData = configDatabase.database().ref(\"/customers\");\nconst databaseCustomerItem = configDatabase.database().ref(\"/customersItem\");\nconst databaseCustomerMoney = configDatabase.database().ref(\"/customersMoney\");\n\nconst getLoginSignUpData = () =>  new Promise(function(resolve, reject) {\n    databaseLoginSignUp.on('value',snapshot=>{\n        resolve(snapshot.val());\n    })\n});\n\nconst getCustomerData = () =>  new Promise(function(resolve, reject) {\n    databaseCustomerData.on('value',snapshot=>{\n        resolve(snapshot.val());\n    })\n});\n\nconst getCustomerItems = () =>  new Promise(function(resolve, reject) {\n    databaseCustomerItem.on('value',snapshot=>{\n        resolve(snapshot.val());\n    })\n});\n\nconst getCustomerAmount = () =>  new Promise(function(resolve, reject) {\n    databaseCustomerMoney.on('value',snapshot=>{\n        resolve(snapshot.val());\n    })\n});\n\n\nexport function* displayData(){\n    try{\n        const result = yield call(getLoginSignUpData)\n        yield put(fun.displayDataSuccess(result))\n    }catch(error){\n        yield put(fun.displayDataError(error))\n    }\n}\n\nexport function* initialSignUpGen(data){\n    try{\n        let x = databaseLoginSignUp.push(data.payload);\n        const out = { [x.key]: { ...data.payload }}\n        yield put(fun.successSignUp(out))\n\n    }catch(error){\n\n        yield put(fun.errorSignUp(error))\n\n    }\n\n}\n\nexport function* initialCustomerGen(data){\n    try{\n        let x = databaseCustomerData.push(data.payload);\n        const out = { [x.key]: { ...data.payload }}\n        yield put(fun.successCustomerAdd(out))\n\n    }catch(error){\n\n        yield put(fun.errorCustomerAdd(error))\n\n    }\n}\n\nexport function* displayCustomerData(data){\n    try{\n        const result = yield call(getCustomerData)\n        const getCustData =  _.map(result,(val,key)=>{\n            return {...val, customerId:key}\n        })\n        const logedCustData = getCustData.filter((val)=>{\n            if(val.logedUserId === data.payload){\n                return val\n            }            \n        })\n        yield put(fun.displayCustomerDataSuccess(logedCustData))\n    }catch(error){\n        yield put(fun.displayCustomerDataError(error))\n    }\n}\n\nexport function* deleteCustomer(data){\n    try{\n        // Delete customer of this id start\n        const useRef = configDatabase.database().ref(`/customers/${data.payload.deleteId}`);\n        useRef.remove();\n        \n        const allcust = yield call(getCustomerData)\n        const getCustData =  _.map(allcust,(val,key)=>{\n            return {...val, customerId:key}\n        })\n        const logedCustData = getCustData.filter((val)=>{\n            if(val.logedUserId === data.payload.logedId){\n                return val\n            }            \n        })\n        // Delete customer of this id end\n\n        // Delete customer items of this id start\n        const allitems = yield call(getCustomerItems)\n        \n        const getCustDataitem =  _.map(allitems,(val,key)=>{\n            return {...val, customerDataId:key}\n        })\n\n        const filteredCustomer = getCustDataitem.filter((val) => {\n            if(val.customerId === data.payload.deleteId){\n                return val\n            }\n        })\n\n        filteredCustomer && filteredCustomer.map((val) => {\n            const useRef = configDatabase.database().ref(`/customersItem/${val.customerDataId}`);\n            return useRef.remove();\n        })\n        // Delete customer items of this id end\n\n        // Delete customer Money of this id start\n        const allMoney = yield call(getCustomerAmount)\n\n        const getCustDataMoney =  _.map(allMoney,(val,key)=>{\n            return {...val, customerMoneyId:key}\n        })\n\n        const filteredMoney = getCustDataMoney.filter((val) => {\n            if(val.customerId === data.payload.deleteId){\n                return val\n            }\n        })\n\n        filteredMoney && filteredMoney.map((val) => {\n            const useRef = configDatabase.database().ref(`/customersMoney/${val.customerMoneyId}`);\n            return useRef.remove();\n        })\n        // Delete customer Money of this id end\n\n        yield put(fun.deleteCustomerSuccess(logedCustData))\n    } catch(error) {\n        yield put(fun.deleteCustomerError(error))\n    }\n}\n\nexport function* updateCustomer(data){\n    \n    try{\n        const {customerId,logedUserId} = data.payload;\n        const useRef = configDatabase.database().ref(`/customers/${customerId}`);\n        useRef.update(data.payload);\n        \n        const result = yield call(getCustomerData)\n        const getCustData =  _.map(result,(val,key)=>{\n            return {...val, customerId:key}\n        })\n        \n        const logedCustData = getCustData.filter((val)=>{\n            if(val.logedUserId === logedUserId){\n                return val\n            }            \n        })\n        yield put(fun.updateCustomerSuccess(logedCustData))\n    } catch(error) {\n        yield put(fun.updateCustomerError(error))\n    }\n}\n\nexport function* addItemsOfCustomer(data){\n    try{\n        \n        const result = yield call(getCustomerItems)\n        const getCustMoneyData =  _.map(result,(val,key)=>{\n            return {...val, customerItemsId:key}\n        })\n        \n        const xyz = getCustMoneyData.filter((val)=>{\n            if(val.customerId === data.payload.customerId){\n                return val\n            }\n        })\n        \n        let newObj2 = {};\n        if(xyz.length > 0){\n            xyz.map((val)=>{\n                const newobj = [...val.totalItems, ...data.payload.totalItems]\n                const temp = {customerId: val.customerId, totalItems: [...newobj]}\n                const useRef = configDatabase.database().ref(`/customersItem/${val.customerItemsId}`);\n                useRef.update(temp);\n                newObj2 = {...temp, customerItemsId: val.customerItemsId }\n            })\n        }else{\n            let x = databaseCustomerItem.push(data.payload);\n            newObj2 = {...data.payload, customerItemsId: x.key }\n        }\n        \n        yield put(fun.addItemsSuccess(newObj2))\n    }catch(error){\n        yield put(fun.addItemsError(error))\n    }\n}\n\nexport function* getItemsOfCustomer(data){\n    try{\n        const clickedCustomer = JSON.parse(localStorage.getItem(\"Clicked_User_Data\")) || []\n        const result = yield call(getCustomerItems)\n        \n        const getCustData =  _.map(result,(val,key)=>{\n            return {...val, customerDataId:key}\n        })\n\n        const filteredCustomer = getCustData.filter((val) => {\n            if(val.customerId === clickedCustomer.customerId){\n                return val\n            }\n        })\n        yield put(fun.getItemsSuccess(filteredCustomer))\n    }catch(error){\n        yield put(fun.getItemsError(error))\n    }\n}\n\nexport function* addMoneyofCustomer(data){\n    try{\n        const result = yield call(getCustomerAmount)\n        const getCustMoneyData =  _.map(result,(val,key)=>{\n            return {...val, customerMoneyId:key}\n        })\n        \n        const xyz = getCustMoneyData.filter((val)=>{\n            if(val.customerId === data.payload.customerId){\n                return val\n            }\n        })\n        \n        let newObj2 = {};\n        if(xyz.length > 0){\n            xyz.map((val)=>{\n                const newobj = [...val.totAmount, ...data.payload.totAmount]\n                newObj2 = {customerId: val.customerId, totAmount: [...newobj]}\n                const useRef = configDatabase.database().ref(`/customersMoney/${val.customerMoneyId}`);\n                useRef.update(newObj2);\n            })\n        }else{\n            databaseCustomerMoney.push(data.payload);\n            newObj2 = { customerId: data.payload.customerId, totAmount: [...data.payload.totAmount] }\n        }\n        \n        yield put(fun.addMoneySuccess(newObj2))\n    }catch(error){\n        yield put(fun.addMoneyError(error))\n    }\n}\n\nexport function* getMoneyofCustomer(data){\n    try{\n        const clickedCustomer = JSON.parse(localStorage.getItem(\"Clicked_User_Data\")) || []\n        const result = yield call(getCustomerAmount)\n        const getCustMoneyData =  _.map(result,(val,key)=>{\n            return {...val, customerMoneyId:key}\n        })\n        \n        const finalRes = getCustMoneyData.filter((val)=>{\n            if(val.customerId === clickedCustomer.customerId){\n                return val\n            }\n        })\n\n        yield put(fun.getMoneySuccess(finalRes))\n    }catch(error){\n        yield put(fun.getMoneyError(error))\n    }\n}\n\nexport function * watcherSaga(){\n    yield takeEvery(act.CREATE_INITIAL_SIGNUP,initialSignUpGen);\n    yield takeEvery(act.ON_FORM_DISPLAY_INITIAL,displayData);\n    yield takeEvery(act.ADD_CUSTOMER_INITIAL,initialCustomerGen);\n    yield takeEvery(act.DISPLAY_CUSTOMER_DATA_INITIAL,displayCustomerData);\n    yield takeEvery(act.DELETE_CUSTOMER_INITIAL,deleteCustomer);\n    yield takeEvery(act.UPDATE_CUSTOMER_INITIAL,updateCustomer);\n    yield takeEvery(act.ADD_ITEMS_OF_CUSTOMER_INITIAL,addItemsOfCustomer);\n    yield takeEvery(act.GET_ITEMS_OF_CUSTOMER_INITIAL,getItemsOfCustomer);\n    yield takeEvery(act.ADD_MONEY_OF_CUSTOMER_INITIAL,addMoneyofCustomer);\n    yield takeEvery(act.GET_MONEY_OF_CUSTOMER_INITIAL,getMoneyofCustomer);\n}\n\nexport default function * rootSaga(){\n    yield all([\n        watcherSaga(),\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}