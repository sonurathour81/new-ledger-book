{"ast":null,"code":"var _jsxFileName = \"/home/lenovo-hoolime1/Desktop/sonu 22-01-2020/React Redux Projects without npm/ledger_book/src/component/confirmationModal/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Field, formInputData, formValidation } from 'reactjs-input-validator';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { Modal } from 'react-bootstrap';\nimport { TextConfim, CustmButton, CustmHeader, ShowHideToggle, CustmFormField } from './style.js';\nimport * as fun from '../../redux/actions/index';\nimport \"./style.css\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nexport const ConfirmationModal = props => {\n  const mapState = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [fixedValue, setFixedValue] = useState('');\n  useEffect(() => {\n    setFixedValue(...(JSON.parse(localStorage.getItem(\"LogedUser\")) || ''));\n  }, [mapState]);\n  const [changePasswordStates, setChangePasswordStates] = useState({});\n\n  const fieldHandle = (event, inputValue, inputName, validationState, isRequired) => {\n    const value = event && event.target.value || inputValue;\n    changePasswordStates[inputName] = {\n      value,\n      validation: validationState,\n      isRequired\n    };\n    setChangePasswordStates({ ...changePasswordStates\n    });\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    const isFormValid = formValidation(changePasswordStates);\n    const inputValue = formInputData(changePasswordStates);\n\n    if (inputValue.old_pass !== inputValue.password && isFormValid) {\n      const temp = { ...fixedValue,\n        password: inputValue.password,\n        confirm_password: inputValue.confirm_password\n      };\n      dispatch(fun.initialChangePasswordUser(temp));\n      props.hideModal();\n      toast.success(\"Change Password Successfully!\");\n      setChangePasswordStates({});\n    } else if (inputValue.old_pass === inputValue.password) {\n      alert(\"Old Password & New Password can't same!\");\n    }\n  };\n\n  const [toggle, setToggle] = useState(false);\n  useEffect(() => {\n    setToggle(false);\n  }, [mapState]);\n  const passwordValue = changePasswordStates.password && changePasswordStates.password.value;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    show: props.showModal,\n    onHide: props.hideModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustmHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, props.changePass ? \"Change Password\" : \"Confirmation\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, !props.changePass && /*#__PURE__*/React.createElement(TextConfim, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }, props.text), props.changePass && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"ui form\",\n    onSubmit: e => submitForm(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CustmFormField, {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(ShowHideToggle, {\n    textcolor: toggle ? \"#db2828\" : \"#21ba45\",\n    onClick: () => setToggle(!toggle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 37\n    }\n  }, toggle ? \"Hide Passwords\" : \"Show Passwords\"), /*#__PURE__*/React.createElement(Field, {\n    validator: \"equals\",\n    comparison: fixedValue.password,\n    validatorErrMsg: \"Password are not same to old password.\",\n    required: true,\n    type: toggle ? \"text\" : \"password\",\n    label: \"Old Password\",\n    name: \"old_pass\",\n    onChange: fieldHandle,\n    value: changePasswordStates.old_pass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(CustmFormField, {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isAlphanumeric\",\n    minLength: 8,\n    minLengthErrMsg: \"Short passwords are easy to guess. Try one with atleast 8 characters\",\n    required: true,\n    type: toggle ? \"text\" : \"password\",\n    label: \"New Password\",\n    name: \"password\",\n    onChange: fieldHandle,\n    value: changePasswordStates.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(CustmFormField, {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"equals\",\n    comparison: passwordValue,\n    validatorErrMsg: \"New password and confirm password are not match!\",\n    required: true,\n    type: toggle ? \"text\" : \"password\",\n    label: \"Confirm Password\",\n    name: \"confirm_password\",\n    onChange: fieldHandle,\n    value: changePasswordStates.confirm_password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(CustmButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"positive ui button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 37\n    }\n  }, \"Change\"))), !props.changePass && /*#__PURE__*/React.createElement(CustmButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"positive ui button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 37\n    }\n  }, \"OK\"))))));\n};","map":{"version":3,"sources":["/home/lenovo-hoolime1/Desktop/sonu 22-01-2020/React Redux Projects without npm/ledger_book/src/component/confirmationModal/index.js"],"names":["React","useState","useEffect","Field","formInputData","formValidation","useSelector","useDispatch","_","Modal","TextConfim","CustmButton","CustmHeader","ShowHideToggle","CustmFormField","fun","toast","ConfirmationModal","props","mapState","state","dispatch","fixedValue","setFixedValue","JSON","parse","localStorage","getItem","changePasswordStates","setChangePasswordStates","fieldHandle","event","inputValue","inputName","validationState","isRequired","value","target","validation","submitForm","e","preventDefault","isFormValid","old_pass","password","temp","confirm_password","initialChangePasswordUser","hideModal","success","alert","toggle","setToggle","passwordValue","showModal","changePass","text"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { Field, formInputData, formValidation } from 'reactjs-input-validator';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash'\n\nimport { Modal } from 'react-bootstrap';\n\nimport {TextConfim,CustmButton,CustmHeader,ShowHideToggle, CustmFormField} from './style.js'\nimport * as fun from '../../redux/actions/index'\n\nimport \"./style.css\"\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const ConfirmationModal = (props) =>{\n    const mapState = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    const [fixedValue, setFixedValue] = useState('')\n    useEffect(()=>{\n        setFixedValue(...JSON.parse(localStorage.getItem(\"LogedUser\")) || '')\n    },[mapState])\n\n    const [changePasswordStates, setChangePasswordStates] = useState({});\n\n\tconst fieldHandle = (event, inputValue, inputName, validationState, isRequired) => {\n\t\tconst value = (event && event.target.value) || inputValue;\n\t\tchangePasswordStates[inputName] = { value, validation: validationState, isRequired };\n\t\tsetChangePasswordStates({...changePasswordStates})\n    }\n    const submitForm = (e) => {\n        e.preventDefault();\n\t\tconst isFormValid = formValidation(changePasswordStates);\n\t\tconst inputValue = formInputData(changePasswordStates)\n\n        if(inputValue.old_pass !== inputValue.password && isFormValid){\n            const temp = {...fixedValue, password:inputValue.password,confirm_password:inputValue.confirm_password}\n            dispatch(fun.initialChangePasswordUser(temp))\n            props.hideModal()\n            toast.success(\"Change Password Successfully!\")\n            setChangePasswordStates({})\n        }else if(inputValue.old_pass === inputValue.password){\n            alert(\"Old Password & New Password can't same!\")\n        }\n    }\n    \n    const [toggle, setToggle] = useState(false)\n    useEffect(()=>{\n        setToggle(false)\n    },[mapState])\n    const passwordValue = changePasswordStates.password && changePasswordStates.password.value;\n\n    return(\n        <div>\n            <Modal show={props.showModal} onHide={props.hideModal}>\n                <CustmHeader>\n                    <Modal.Header>\n                        <Modal.Title>{props.changePass ? \"Change Password\" : \"Confirmation\"}</Modal.Title>\n                    </Modal.Header>\n                </CustmHeader>\n                <Modal.Body>\n                    <div>\n                        {\n                            !props.changePass &&\n                            <TextConfim>\n                                {props.text}\n                            </TextConfim>\n                        }\n                        {\n                            props.changePass &&\n                            <form className=\"ui form\" onSubmit={(e)=>submitForm(e)}>\n                                <CustmFormField className=\"field\">\n                                    <ShowHideToggle textcolor = {toggle ? \"#db2828\" : \"#21ba45\"} onClick={()=>setToggle(!toggle)}>\n                                        {\n                                           toggle ? \"Hide Passwords\" : \"Show Passwords\"\n                                        }\n                                    </ShowHideToggle>\n                                    <Field                                \n                                        validator=\"equals\"\n                                        comparison={fixedValue.password}\n                                        validatorErrMsg=\"Password are not same to old password.\"\n                                        required\n                                        type= { toggle ? \"text\" : \"password\" }\n                                        label=\"Old Password\"\n                                        name=\"old_pass\"\n                                        onChange={fieldHandle}\n                                        value={changePasswordStates.old_pass}\n                                    />\n                                </CustmFormField>\n                                <CustmFormField className=\"field\">\n                                    <Field\n                                        validator=\"isAlphanumeric\"\n                                        minLength={8}\n                                        minLengthErrMsg=\"Short passwords are easy to guess. Try one with atleast 8 characters\"\n                                        required\n                                        type= { toggle ? \"text\" : \"password\" }\n                                        label=\"New Password\"\n                                        name=\"password\"\n                                        onChange={fieldHandle}\n                                        value={changePasswordStates.password}\n                                    />\n                                </CustmFormField>\n                                <CustmFormField className=\"field\">\n                                    <Field\n                                        validator=\"equals\"\n                                        comparison={passwordValue}\n                                        validatorErrMsg=\"New password and confirm password are not match!\"\n                                        required\n                                        type= { toggle ? \"text\" : \"password\" }\n                                        label=\"Confirm Password\"\n                                        name=\"confirm_password\"\n                                        onChange={fieldHandle}\n                                        value={changePasswordStates.confirm_password}\n                                    />\n                                </CustmFormField>\n                                <CustmButton>\n                                    <button \n                                        className=\"positive ui button\" \n                                        type=\"submit\"\n                                    >\n                                        Change\n                                    </button>\n                                </CustmButton>\n                            </form>\n                            }\n                            {\n                                !props.changePass &&\n                                <CustmButton>\n                                    <button \n                                        className=\"positive ui button\" \n                                        type=\"submit\"\n                                    >\n                                        OK\n                                    </button>\n                                </CustmButton>\n                            }\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}