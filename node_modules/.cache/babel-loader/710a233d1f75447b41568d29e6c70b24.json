{"ast":null,"code":"var _jsxFileName = \"/home/lenovo-hoolime1/Desktop/sonu 22-01-2020/React Redux Projects without npm/ledger_book/src/component/addUser/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport _ from 'lodash';\nimport { Field, formInputData, formValidation } from 'reactjs-input-validator';\nimport * as styl from '../../style';\nimport './style.css';\nimport * as fun from '../../redux/actions/index';\nimport { ConfirmationModal } from '../confirmationModal';\n\nconst AddUser = props => {\n  const mapState = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [customerState, setCustomerState] = useState({});\n  const [shouldValidateInputs, setShouldValidateInputs] = useState('');\n\n  const fieldHandle = (event, inputValue, inputName, validationState, isRequired) => {\n    const value = event && event.target.value || inputValue;\n    customerState[inputName] = {\n      value,\n      validation: validationState,\n      isRequired\n    };\n    setCustomerState({ ...customerState\n    });\n  };\n\n  const [logedId, setLogedId] = useState('');\n  useEffect(() => {\n    const logedData = JSON.parse(localStorage.getItem(\"LogedUser\"));\n    logedData && logedData.map(val => {\n      setLogedId(val.key);\n    });\n  }, []);\n  useEffect(() => {\n    dispatch(fun.displayCustomerDataInitial(logedId));\n    dispatch(fun.displayDataInitial());\n  }, [logedId]);\n  const [showModal, setShowModal] = useState(false);\n  const [text, setText] = useState('');\n\n  const confirmOpen = status => {\n    setShowModal(true);\n\n    if (status === \"email_phone\") {\n      setText('This user are registred already! Please use another Email Id and Phone Number!');\n    } else if (status === \"email\") {\n      setText('This Email Id is registred already! Please use another Email Id!');\n    } else if (status === 'phone') {\n      setText('This Phone Number is registred already! Please use another Phone Number!');\n    } else if (status === 'success') {\n      setText(`User Added Successfully! You can go on user's list`);\n    }\n  };\n\n  const hideModal = () => {\n    setShowModal(false);\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    const isFormValid = formValidation(customerState);\n    const inputValue = formInputData(customerState);\n    const tempObj = { ...inputValue,\n      logedUserId: logedId\n    };\n\n    if (isFormValid) {\n      const objectLenght = Object.keys(mapState.customerData.customer).length;\n      const checkArry = objectLenght > 0 ? _.map(mapState.customerData.customer, (val, key) => {\n        return val;\n      }) : (dispatch(fun.initialCustomerAdd(tempObj)), confirmOpen(\"success\"));\n      const xyz = objectLenght > 0 && checkArry.filter(val => {\n        if (val.cust_email === tempObj.cust_email && val.cust_phone === tempObj.cust_phone) {\n          confirmOpen(\"email_phone\");\n          return val;\n        } else if (val.cust_email === tempObj.cust_email) {\n          confirmOpen(\"email\");\n          return val;\n        } else if (val.cust_phone === tempObj.cust_phone) {\n          confirmOpen(\"phone\");\n          return val;\n        }\n      });\n\n      if (objectLenght !== 0) {\n        if (xyz.length === 0) {\n          dispatch(fun.initialCustomerAdd(tempObj));\n          confirmOpen(\"success\");\n        }\n      }\n    } else {\n      setShouldValidateInputs(!isFormValid);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(styl.ManForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(styl.ManFormSec, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(styl.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Add Customer\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"ui form\",\n    onSubmit: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isAlpha\",\n    required: true,\n    label: \"Customer Name\",\n    name: \"cust_name\",\n    placeholder: \"Customer Name\",\n    onChange: fieldHandle,\n    value: customerState.cust_name,\n    shouldValidateInputs: shouldValidateInputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isEmail\",\n    required: true,\n    label: \"Customer Email\",\n    name: \"cust_email\",\n    placeholder: \"Example@gmail.com\",\n    onChange: fieldHandle,\n    value: customerState.cust_email,\n    shouldValidateInputs: shouldValidateInputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isNumeric\",\n    maxLength: 10,\n    minLength: 10,\n    required: true,\n    label: \"Customer Phone\",\n    name: \"cust_phone\",\n    placeholder: \"Customer Phone\",\n    onChange: fieldHandle,\n    value: customerState.cust_phone,\n    shouldValidateInputs: shouldValidateInputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isAlpha\",\n    requiredErrMsg: \"Enter your city\",\n    required: true,\n    label: \"Customer City\",\n    name: \"cust_city\",\n    placeholder: \"Customer City\",\n    onChange: fieldHandle,\n    value: customerState.cust_city,\n    shouldValidateInputs: shouldValidateInputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isAlphanumeric\",\n    requiredErrMsg: \"Enter your street\",\n    required: true,\n    label: \"Customer Street\",\n    name: \"cust_street\",\n    placeholder: \"Customer Street\",\n    onChange: fieldHandle,\n    value: customerState.cust_street,\n    shouldValidateInputs: shouldValidateInputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    validator: \"isNumeric\",\n    maxLength: 6,\n    minLength: 6,\n    required: true,\n    label: \"Customer Zip Code\",\n    name: \"cust_zip\",\n    placeholder: \"Customer Zip Code\",\n    onChange: fieldHandle,\n    value: customerState.cust_zip,\n    shouldValidateInputs: shouldValidateInputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(styl.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"positive ui button\",\n    type: \"submit\",\n    disabled: !formValidation(customerState) && 'disabled',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, \"Add Customer\"))))), /*#__PURE__*/React.createElement(ConfirmationModal, {\n    showModal: showModal,\n    hideModal: hideModal,\n    text: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default AddUser;","map":{"version":3,"sources":["/home/lenovo-hoolime1/Desktop/sonu 22-01-2020/React Redux Projects without npm/ledger_book/src/component/addUser/index.js"],"names":["React","useState","useEffect","useSelector","useDispatch","_","Field","formInputData","formValidation","styl","fun","ConfirmationModal","AddUser","props","mapState","state","dispatch","customerState","setCustomerState","shouldValidateInputs","setShouldValidateInputs","fieldHandle","event","inputValue","inputName","validationState","isRequired","value","target","validation","logedId","setLogedId","logedData","JSON","parse","localStorage","getItem","map","val","key","displayCustomerDataInitial","displayDataInitial","showModal","setShowModal","text","setText","confirmOpen","status","hideModal","submitForm","e","preventDefault","isFormValid","tempObj","logedUserId","objectLenght","Object","keys","customerData","customer","length","checkArry","initialCustomerAdd","xyz","filter","cust_email","cust_phone","cust_name","cust_city","cust_street","cust_zip"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport _ from 'lodash';\n\nimport { Field, formInputData, formValidation } from 'reactjs-input-validator';\n\nimport * as styl from '../../style'\nimport './style.css';\nimport * as fun from '../../redux/actions/index'\nimport { ConfirmationModal } from '../confirmationModal';\n\n\nconst AddUser = (props) => {\n\n    const mapState = useSelector(state => state);\n    const dispatch = useDispatch();\n\tconst [customerState, setCustomerState] = useState({});\n\tconst [shouldValidateInputs, setShouldValidateInputs] = useState('')\n    \n\tconst fieldHandle = (event, inputValue, inputName, validationState, isRequired) => {\n        const value = (event && event.target.value) || inputValue;\n\t\tcustomerState[inputName] = { value, validation: validationState, isRequired };\n\t\tsetCustomerState({...customerState})\n        \n\t}\n    \n    \n    const [logedId, setLogedId] = useState('')\n    useEffect(()=>{\n        const logedData = JSON.parse(localStorage.getItem(\"LogedUser\"))\n        logedData && logedData.map((val) => {\n            setLogedId(val.key)\n        })\n    }, [])\n    \n    useEffect(()=>{\n        dispatch(fun.displayCustomerDataInitial(logedId))\n        dispatch(fun.displayDataInitial())\n    }, [logedId])\n    \n\n    const [showModal,setShowModal] = useState(false)\n    const [text, setText] = useState('')\n\n    const confirmOpen = (status) => {\n        setShowModal(true)\n        if(status === \"email_phone\"){\n            setText('This user are registred already! Please use another Email Id and Phone Number!')\n        }else if(status === \"email\"){\n            setText('This Email Id is registred already! Please use another Email Id!')\n        }else if(status === 'phone'){\n            setText('This Phone Number is registred already! Please use another Phone Number!')\n        }else if(status === 'success'){\n            setText(`User Added Successfully! You can go on user's list`)\n        }\n    }\n\t\n    const hideModal = () => {\n        setShowModal(false)\n    }\n\n    const submitForm = (e) => {\n        e.preventDefault();\n        \n        const isFormValid = formValidation(customerState);\n        const inputValue = formInputData(customerState)\n        const tempObj = {...inputValue, logedUserId: logedId }\n        \n\t\tif (isFormValid) {\n            \n            const objectLenght = Object.keys(mapState.customerData.customer).length; \n\t\t\tconst checkArry = objectLenght > 0 ? _.map(mapState.customerData.customer, (val, key) => {\n\t\t\t\treturn val\n\t\t\t}) : (dispatch(fun.initialCustomerAdd(tempObj)),confirmOpen(\"success\"))\n\n\t\t\tconst xyz = objectLenght > 0 && checkArry.filter((val) => {\n\t\t\t\tif(val.cust_email === tempObj.cust_email && val.cust_phone === tempObj.cust_phone){\n                    confirmOpen(\"email_phone\")\n\t\t\t\t\treturn val\n\t\t\t\t} else if(val.cust_email === tempObj.cust_email){\n                    confirmOpen(\"email\")\n                    return val\n                } else if(val.cust_phone === tempObj.cust_phone){\n                    confirmOpen(\"phone\")\n                    return val\n                }\n\t\t\t})\n\t\t\t\n\t\t\tif(objectLenght !== 0){\n\t\t\t\tif(xyz.length === 0){\n                    dispatch(fun.initialCustomerAdd(tempObj))\n                    confirmOpen(\"success\")\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t} else {\n\t\t\tsetShouldValidateInputs(!isFormValid)\n        }  \n\t}\n\n\n    return(\n      <div>\n        <styl.ManForm>\n            <styl.ManFormSec>\n                <styl.Header>\n                    Add Customer\n                </styl.Header>\n                <form className=\"ui form\" onSubmit={submitForm}>\n                    <div>\n                        <Field\n                            validator=\"isAlpha\"\n                            required\n                            label=\"Customer Name\"\n                            name=\"cust_name\"\n                            placeholder=\"Customer Name\"\n                            onChange={fieldHandle}\n                            value={customerState.cust_name}\n                            shouldValidateInputs={shouldValidateInputs}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            validator=\"isEmail\"\n                            required\n                            label=\"Customer Email\"\n                            name=\"cust_email\"\n                            placeholder=\"Example@gmail.com\"\n                            onChange={fieldHandle}\n                            value={customerState.cust_email}\n                            shouldValidateInputs={shouldValidateInputs}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            validator=\"isNumeric\"\n                            maxLength={10}\n                            minLength={10}\n                            required\n                            label=\"Customer Phone\"\n                            name=\"cust_phone\"\n                            placeholder=\"Customer Phone\"\n                            onChange={fieldHandle}\n                            value={customerState.cust_phone}\n                            shouldValidateInputs={shouldValidateInputs}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            validator=\"isAlpha\"\n                            requiredErrMsg=\"Enter your city\"\n                            required\n                            label=\"Customer City\"\n                            name=\"cust_city\"\n                            placeholder=\"Customer City\"\n                            onChange={fieldHandle}\n                            value={customerState.cust_city}\n                            shouldValidateInputs={shouldValidateInputs}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            validator=\"isAlphanumeric\"\n                            requiredErrMsg=\"Enter your street\"\n                            required\n                            label=\"Customer Street\"\n                            name=\"cust_street\"\n                            placeholder=\"Customer Street\"\n                            onChange={fieldHandle}\n                            value={customerState.cust_street}\n                            shouldValidateInputs={shouldValidateInputs}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            validator=\"isNumeric\"\n                            maxLength={6}\n                            minLength={6}\n                            required\n                            label=\"Customer Zip Code\"\n                            name=\"cust_zip\"\n                            placeholder=\"Customer Zip Code\"\n                            onChange={fieldHandle}\n                            value={customerState.cust_zip}\n                            shouldValidateInputs={shouldValidateInputs}\n                        />\n                    </div>\n                    <styl.Button>\n                        <button \n                            className=\"positive ui button\" \n                            type=\"submit\"\n                            disabled = {!formValidation(customerState) && 'disabled'}\n                        >\n                            Add Customer\n                        </button>\n                    </styl.Button>\n                </form>\n            </styl.ManFormSec>\n        </styl.ManForm>\n        <ConfirmationModal \n            showModal = {showModal}\n            hideModal = {hideModal}\n            text = {text}\n        />\n      </div>\n    )\n}\n\nexport default AddUser;"]},"metadata":{},"sourceType":"module"}